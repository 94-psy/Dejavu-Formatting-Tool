#!/bin/bash
version=0.5
home=$HOME
if [ $SUDO_USER ]; then user=$SUDO_USER; else user=`whoami`; fi

#add current position of the script in order to avoid misunderstanding for the followind IF statement
binary_location="/usr/bin"
updateconf=0

if [[ $EUID -ne 0 ]];
then
if [ -f "$binary_location/DFTool" ]; then
    exec sudo DFTool
    IsInstalled=1
    else
    exec sudo ./DFTool
    IsInstalled=0
fi
     
fi
#da fare: mettere la formattazione con gutmann come quarta voce del menù e, soprattutto, usare un IF per verficare che comando dare o che serie di comandi dare per evitare due funzioni


# Find the rows and columns will default to 80x24 is it can not be detected
screen_size=$(stty size 2>/dev/null || echo 24 80) 
rows=$(echo $screen_size | awk '{print $1}')
columns=$(echo $screen_size | awk '{print $2}')

# Definisco le dimensioni dell'interfaccia:
r=$(( rows / 2 ))
c=$(( columns / 2 ))
# e nel caso in cui lo schermo sia piccolo
r=$(( r < 20 ? 20 : r ))
c=$(( c < 70 ? 70 : c ))


declare -a partitions=()
turnoff=true


titolo="Dejavu Formatting Tool"

function dipendenze ()

{
    {
        echo "\Installing nwipe.."
        sudo apt install nwipe -y 2>/dev/null
        echo 33
        echo "\Installing smartmontools.."
        sudo apt install smartmontools -y 2>/dev/null
        echo 67
        echo "\Installing sensible-utils.."
        sudo apt install sensible-utils -y 2>/dev/null
        echo 100
        
    } |whiptail --title "$titolo" --gauge "$Dependency" $r $c 0
}


function create_config_file ()
{
    rm $conf_file
    touch $conf_file
    whiptail --title "Missing Config File" --msgbox "The configurration file is missing, now we will create a new one. Please answer the short questions" $r $c 
    SETTINGS=$(whiptail --inputbox "What is the Server address of the file that has to be retrieved? (I.E. 10.0.0.3/foo/my_file)" $r $c --title "Configuration file" 3>&1 1>&2 2>&3)
    echo "SERVER_ADDR=$SETTINGS" >> $conf_file
    SETTINGS=$(whiptail --inputbox "What is the name of the file that has to be retrieved? (I.E. my_file.iso or my_file.img)" $r $c --title "Configuration file" 3>&1 1>&2 2>&3) 
    echo "FILE_NAME=$SETTINGS" >> $conf_file
    SETTINGS=$(whiptail --inputbox "What is the name of the checksum file that has to be retrieved? (I.E. my_file.iso.md5 NB: AT THE MOMENT, ONLY MD5 IS SUPPORTED)" $r $c --title "Configuration file" 3>&1 1>&2 2>&3)
    echo "FILE_CHECK_NAME=$SETTINGS" >> $conf_file
    SETTINGS=$(whiptail --inputbox "What is the Server address of the checksum file that has to be retrieved? (I.E. 10.0.0.3/foo/my_file.iso.md5 NB: AT THE MOMENT, ONLY MD5 IS SUPPORTED)" $r $c --title "Configuration file" 3>&1 1>&2 2>&3)
    echo "FILE_CHECK_DEST=$SETTINGS" >> $conf_file
    SETTINGS=$(whiptail --title "Configuration file" --radiolist \
    "Choose default formatting"  $r $c 4 \
    "D" "Badblocks and DD, 5 pattern (default)" ON \
    "G" "Gutmann method, 35 pattern" OFF \
    "N" "Ask every time" OFF 3>&1 1>&2 2>&3)
    echo "FORM=$SETTINGS" >> $conf_file
    SETTINGS=$(whiptail --title "Configuration file" --radiolist \
    "Choose user's language"  $r $c 4 \
    "EN" "English (default)" ON \
    "IT" "Italian" OFF 3>&1 1>&2 2>&3)
    echo "LAN=$SETTINGS" >> $conf_file
    dipendenze
    echo "DEP=OK" >> $conf_file
}



working_dir="$home/.Dejavu"
local_bin="$working_dir/bin"
local_log="$working_dir/log"
conf_file="$working_dir/configuration.conf"


if [ -f "$working_dir" ]; then
    echo "Working directory is OK"
   else
   mkdir -p $working_dir
fi

if [ -f "$conf_file" ]; then
    echo "Config file is OK"
    else
    create_config_file
fi

#MANCA DA CONTROLLARE PEZZO A PEZZO SE CI FOSSE TUTTO
server=$( cat $conf_file | grep SERVER_ADDR= | tr -d SERVER_ADDR= ) #contains the  server destination of the file
if [ -z "$server" ]; then
    #it's empty
    updateconf=1
    server=$(whiptail --inputbox "What is the Server address of the file that has to be retrieved? (I.E. 10.0.0.3/foo/my_file)" $r $c --title "Configuration file incomplete" 3>&1 1>&2 2>&3)
fi

file_name=$( cat $conf_file | grep FILE_NAME= | tr -d FILE_NAME= )  #contains the  local file name
if [ -z "$file_name" ]; then
    #it's empty
    updateconf=1
    file_name=$(whiptail --inputbox "What is the name of the file that has to be retrieved? (I.E. my_file.iso or my_file.img)" $r $c --title "Configuration file incomplete" 3>&1 1>&2 2>&3)
fi

language=$( cat $conf_file | grep LAN= | tr -d LAN= )
if [ -z "$language" ]; then
    #it's empty
    updateconf=1
    language=$(whiptail --title "Configuration file incomplete" --radiolist \
    "Choose user's language"  $r $c 4 \
    "EN" "English (default)" ON \
    "IT" "Italian" OFF 3>&1 1>&2 2>&3)
fi

def_formatting=$( cat $conf_file | grep FORM= | tr -d FORM= )
if [ -z "$language" ]; then
    #it's empty
    updateconf=1
    def_formatting=$(whiptail --title "Configuration file" --radiolist \
    "Choose default formatting"  $r $c 4 \
    "D" "Badblocks and DD, 5 pattern (default)" ON \
    "G" "Gutmann method, 35 pattern" OFF \
    "N" "Ask every time" OFF 3>&1 1>&2 2>&3)
fi

server_check=$( cat $conf_file | grep FILE_CHECK_DEST= | tr -d FILE_CHECK_DEST= ) #contains the  server destination of the checksum
if [ -z "$server_check" ]; then
    #it's empty
    updateconf=1
    server_check=$(whiptail --inputbox "What is the Server address of the checksum file that has to be retrieved? (I.E. 10.0.0.3/foo/my_file.iso.md5 NB: AT THE MOMENT, ONLY MD5 IS SUPPORTED)" $r $c --title "Configuration file" 3>&1 1>&2 2>&3)
fi

local_check_name=$( cat $conf_file | grep FILE_CHECK_NAME= | tr -d FILE_CHECK_NAME= )
if [ -z "$local_check_name" ]; then
    #it's empty
    updateconf=1
    local_check_name=$(whiptail --inputbox "What is the name of the checksum file that has to be retrieved? (I.E. my_file.iso.md5 NB: AT THE MOMENT, ONLY MD5 IS SUPPORTED)" $r $c --title "Configuration file incomplete" 3>&1 1>&2 2>&3)
fi

dep="$( cat $conf_file | grep DEP= | tr -d DEP= )"
if [ -z "$dep" ]; then
    #it's empty
    updateconf=1
    dep
fi

local_check_downloaded="$locale_check.new" #contains the  local position of the downloaded checksum file
local_file="$working_dir/$file_name" #contains the  local position of the file
locale_check="$working_dir/$local_check_name" #contains the  local position of the checksum file
waiting_time=30 #check every 30 seconds
update_server= #TO BE SET FROM GITHUB

function update_config ()
{
    mv $conf_file "$conf_file.old" 
    touch $conf_file
    echo "SERVER_ADDR=$server" >> $conf_file
    echo "FILE_NAME=$file_name" >> $conf_file
    echo "FILE_CHECK_NAME=$local_check_name" >> $conf_file
    echo "FILE_CHECK_DEST=$server_check" >> $conf_file
    echo "LAN=$language" >> $conf_file
    echo "DEP=$dep" >> $conf_file
    echo "FORM=$def_formatting" >> $conf_file
        
        
}

if [ $updateconf -eq 1 ]; then
    update_config
    updateconf=0
fi


total_disks=0
case "$dep" in
    OK) ;;
    *) dipendenze
       dep="OK" 
       update_config ;;
esac



case "$language" in 
	IT ) #set IT
	MainMenu="Elenco delle principali funzionalità:"
	SubMenu1="Formatta i dischi, installa il sistema e uscire dal programma"
	SubMenu2="Formatta i dischi"
	SubMenu3="Installa il sistema"
	SubMenu4="Opzioni avanzate"
	SubMenu5="Info"
	ADV1="Aggiorna i file locali"
	ADV2="Aggiorna ed installa il DFTool"
	ADV3="Controlla le dipendenze"
	ADV4="Cambia formattazione di default"
	INFO1="Home page di Credere per Vedere"
	INFO2="Home page del Progetto Dejavu"
	INFO3="Pagina Facebook di Credere per Vedere"
	INFO4="Pagina Facebook del Progetto Dejavu"
	StartDSK="Avvio il disco /dev"
	FormattingProgress="Avanzamento formattazione di default..."
	FormattingProgressG="Avanzamento formattazione con metodo Gutmann..."
	InstallingProgress="Avanzamento installazione..."
	PCShutdown="Spegnere il PC alla fine del processo?"
	Dependency="Controllando le dipendenze"
	DSKFOUND="I dischi su cui lavorare trovati ammontano a:"
	WGETERROR="Server non raggiungibile, i file locali non saranno aggiornati"
	ERRORT="ERRORE"
	INSTERR="Il file di installazione è mancante, installazione annullata. Provare ad aggiornare il file o controllare la connessione ad Internet"
	CFM="Scegliere il metodo di formattazione"
	CF="Scegliere quale metodo di formattazione si vuole usare"
	FTEXTM="Scegliere il metodo di formattazione per questa sessione"
	FTEXT="Scegliere quale metodo di formattazione si vuole usare"
	F1="Badblocks e DD, 5 pattern in totale (default)"
	F2="Metodo di Gutmann, 35 pattern in totale"
	F3="Chiedere tutte le volte"
	UPDFT="Aggiornamento DFTool"
    UPDOK="Il Dejavu Formatting Tool è già all'ultima versione, premere OK per tornare al menu' principale"
	UPNO="IL Dejavu Formatting Tool è ora aggiornato all'ultima versione, premere OK per tornare al menu' principale"
	 ;;
				
	*) #set EN
	MainMenu="List of main functions:"
	SubMenu1="Formatting disks, installing OS, exiting program"
	SubMenu2="Formatting disks"
	SubMenu3="Installing OS"
	SubMenu4="Advanced options"
	SubMenu5="Info"
	ADV1="Update local files"
	ADV2="Update and install the DFTool"
	ADV3="Check dependency"
	ADV4="Change default formatting method"
	INFO1="Home page of Credere per Cedere"
	INFO2="Home page of Dejavu Project"
	INFO3="Facebook page of Credere per Veder"
	INFO4="Facebook page of Dejavu Project"
	StartDSK="Starting disk /dev"
	FormattingProgress="Default formatting in progress..."
	FormattingProgressG="Gutmann's method formatting in progress..."
	InstallingProgress="Installing progress..."
	PCShutdown="Turn off the PC at the end of the process?"
	Dependency="Checking dependecies"
	DSKFOUND="The total number of disks where is possible to work on is:"
	WGETERROR="Server unreachable, local files won't be updated"
	ERRORT="ERROR"
	INSTERR="Installation file is missing, the installation is aborted. try to update the file or check your Internet connection"
	CFM="Choose the formatting method"
	CF="Choose which formatting method you want to use"
    FTEXTM="Choose the formatting method for this session"
    FTEXT="Choose which formatting method you want to use"
	F1="Badblocks and DD, a total of 5 pattern (default)"
	F2="Gutmann method, a total of 35 pattern"
	F3="Ask every time"
	UPDFT="DFTool Updating"
	UPDOK="The Dejavu Formatting Tool is already up to date, press OK to return to main menu"
	UPNO="The Dejavu Formatting Tool is now at last version, press OK to return to main menu"
	 ;;
esac


function update_DFTool ()
{
#download from github the latest and move to $binary_location

wget $update_server -O /tmp/DFTool_tmp -T 30 -t 1 2>/dev/null
nversion=$( sed -n '2p' /tmp/DFTool_tmp | tr -d version= )
if [ "$version" = "$nversion" ] ; then #update only when the version is different --> i want to have alway the latest available version (also one modified manualli with a higher version will be replaced)
    echo "Already Update"
    whiptail --title "$UPDFT" --msgbox "$UPDOK" $r $c
else
    echo "Updating.."
    chmod +x /tmp/DFTool_tmp
    sudo mv -f /tmp/DFTool_tmp "$binary_location"/DFTool
    whiptail --title "$UPDFT" --msgbox "$UPNO" $r $c
fi
}

function prepara_file ()
{
    file="$home/.tmp_part.txt"
    mkdir -p $working_dir
    mkdir -p $local_bin
    mkdir -p $local_log
    sudo chmod 777 --recursive $working_dir
    sudo chmod 777 --recursive $local_bin
    sudo chmod 777 --recursive $local_log
    rm -rf .counter
    rm -rf '$file'
    touch '$file'
    
}

function scan_disks ()
{
    clear
    sudo lsblk -io KNAME,TYPE,MOUNTPOINT  >> '$file'  
}



function get_disks ()
{
    index=0
    indexi=0
    total_disks=0
    disks_list=()
    prepara_file
    scan_disks

    while read name dsk_type mounting_point 
    do
        if [ "$mounting_point" == "/" ] ;
        then
            to_avoid=$name
        fi
    done < '$file' 
    dsk_type="${to_avoid::-5}"
    case "$dsk_type" in
	    nvme)	to_avoid="${to_avoid::-2}" ;;
	    *) to_avoid="${to_avoid::-1}";;	
    esac

    while read name dsk_type mounting_point 
    do
        if [ "$dsk_type" == "disk" -a "$to_avoid" != "$name" ] ;
        then
            disks_list+=("$name")
        fi
    done < '$file'
    for i in ${disks_list[@]}; do
        (( total_disks += 1))
    done
    echo "$DSKFOUND $total_disks"
}


function formatta ()
{
    touch "$working_dir"/.counter
    for i in ${disks_list[@]};
    do
        rm "$local_log"/log_"$i" 2>/dev/null
        rm -rf "$local_bin"/.tmp_"$i" 2>/dev/null
        echo "$StartDSK/$i"
        echo "echo '$StartDSK/$i'" >> "$local_bin"/.tmp_"$i"
       
        #badblocks part, 4 destructive pattern
        #echo "sudo badblocks -fwsv /dev/$i >> log_$i" >> "$local_bin"/.tmp_"$i" 
	    
	    #TO BE TESTED:
	    #echo "sudo badblocks -fwsv /dev/$i -o $local_log/log_$i" >> "$local_bin"/.tmp_"$i" 
	    
    	#DD with another 0 pattern
        #echo "dd if=/dev/zero of=/dev/$i status=progress" >> "$local_bin"/.tmp_"$i"

        echo "echo '1' >> $working_dir/.counter" >> "$local_bin"/.tmp_"$i"
        echo "rm $local_bin/.tmp_$i" >> "$local_bin"/.tmp_"$i"
        echo "exit 0" >> "$local_bin"/.tmp_"$i"
        chmod +x "$local_bin"/.tmp_"$i"
        sudo x-terminal-emulator -e "$local_bin/.tmp_$i" & 
    done
    rm -rf '$file'
    
    while [ $index -lt ${#disks_list[@]} ];do
        index=0
        
        while read contatore 
        do
          #echo $dsk_type	#debug
            (( index += $contatore))
        done < "$working_dir/.counter" 
	echo $(( $index * 100 / $total_disks )) | dialog --title "$titolo" --gauge "$FormattingProgress" $r $c 0
	
	if [[ $index -ge $total_disks ]]; then
	    sleep 1
	else
	sleep $waiting_time
	fi
	 
	done
	
	clear
    
    #LOGGING INFO DA TESTARE
    for i in ${disks_list[@]};
    do
    
    if [ -s "$local_log"/log_"$i" ] 
    then
    	#echo "$_file has some data."	#debug
        smartctl -i /dev/"$i" >> "$local_log"/log_"$i" 
    else
    	#echo "$_file is empty."	#debug
        rm "$local_log"/log_"$i" 2>/dev/null     
    fi
    
    done
    
    
    rm -rf "$working_dir/".counter 2>/dev/null
}
    
    
function formattag ()
{
    for i in ${disks_list[@]};
    do
        rm "$local_log"/log_"$i" 2>/dev/null
        rm -rf "$local_bin"/.tmp_"$i"
        echo "$StartDSK/$i"
        echo "echo '$StartDSK/$i'" >> "$local_bin"/.tmp_"$i"

	    #Gutmann method
        #echo "sudo nwipe --autonuke --logfile=log_$i --method=gutmann /dev/$i " >> "$local_bin"/.tmp_"$i"
	
        echo "echo '1' >> $working_dir/.counter" >> "$local_bin"/.tmp_"$i"
        echo "rm $local_bin/.tmp_$i" >> "$local_bin"/.tmp_"$i"
        echo "exit 0" >> "$local_bin"/.tmp_"$i"
        chmod +x "$local_bin"/.tmp_"$i"
        sudo x-terminal-emulator -e "$local_bin/.tmp_$i" &

    done
    rm -rf '$file'
    
    while [ $index -lt ${#disks_list[@]} ];do
        index=0
        
        while read contatore 
        do
          #echo $dsk_type	#debug
            (( index += $contatore))
        done < "$working_dir/.counter" 
	echo $(( $index * 100 / $total_disks )) | dialog --title "$titolo" --gauge "$FormattingProgressG" $r $c 0
	
	if [[ $index -ge $total_disks ]]; then
	    sleep 1
	else
	    sleep $waiting_time
	fi
	 
	done
	clear
	
    #LOGGING INFO  DA TESTARE
    for i in ${disks_list[@]};
    do
    
    if [ -s "$local_log"/log_"$i" ] 
    then
    	#echo "$_file has some data."	#debug
        smartctl -i /dev/"$i" >> "$local_log"/log_"$i" 
    else
    	#echo "$_file is empty."	#debug
        rm "$local_log"/log_"$i" 2>/dev/null     
    fi
    
    done

    rm -rf "$working_dir/".counter 2>/dev/null
}

function check_img_update () 

{
    sudo rm -rf "$local_check_downloaded"	
    wget $server_check -O $local_check_downloaded -T 30 -t 1 2> /dev/null
    exitstatus="$?"
    
    if [[ "$exitstatus" -eq 0 ]] ; then
        #computing MD5 checksum
        md5sum "$local_file" | awk '{ print $1}' > "$locale_check"

        md5_server=$(sudo head -n 1 "$local_check_downloaded") #md5sum just downloaded
        md5_local=$(sudo head -n 1 "$locale_check") #md5sum already on local drive

        if [ "$md5_local" = "$md5_server" ] ; then
                echo "Update not necessary"

            else
                echo "Updating.."
                sudo mv "$local_check_downloaded" "$locale_check"
                sudo rm -rf $local_file 2>/dev/null
    	        wget $server -O $local_file  2> /dev/null

        fi
        sudo rm -rf $local_check_downloaded 2>/dev/null
    else
    whiptail --title "$ERRORT" --msgbox "$WGETERROR" $r $c
    fi
}


function installa ()

{
if [ -f "$local_file" ]; then #in case of error (missing installation file) i can't install and i will print an error

    touch "$working_dir"/.i_counter
    for i in ${disks_list[@]};
    do
        rm -rf "$local_bin"/.tmp_i_"$i" 2>/dev/null
        echo "$StartDSK/$i"
        echo "echo '$StartDSK/$i'" >> "$local_bin"/.tmp_i_"$i"
      
        #Installing with DD
        #echo "dd if=percorso_iso of=/dev/$i status=progress" >> "$local_bin"/.tmp_i_"$i"
      
        echo "echo '1' >> $working_dir/.i_counter" >> "$local_bin"/.tmp_i_"$i"
        echo "rm $local_bin/.tmp_i_$i" >> "$local_bin"/.tmp_i_"$i"
        echo "exit 0" >> "$local_bin"/.tmp_i_"$i"
        chmod +x "$local_bin"/.tmp_i_"$i"
        sudo x-terminal-emulator -e "$local_bin/.tmp_i_$i" &
    done
    rm -rf '$file'

    while [ $index -lt ${#disks_list[@]} ];do
        index=0
        
        while read contatore 
        do
            #echo $dsk_type	#debug
            (( index += $contatore))
        done < "$working_dir/.i_counter" 
        echo $(( $index * 100 / $total_disks )) | dialog --title "$titolo" --gauge "$InstallingProgress" $r $c 0

        if [[ $index -ge $total_disks ]]; then
            sleep 1
        else
            sleep $waiting_time
        fi
	 
    done
    clear

    rm -rf "$working_dir"/.i_counter 2>/dev/null 

else

whiptail --title "$ERRORT" --msgbox "$INSTERR" $r $c
fi

}

function spegnimento ()
{
    if (whiptail  --title "$titolo" --yesno "$PCShutdown" $r $c ); then
        turnoff=true
    
    else
        turnoff=false
    fi
}

function spegni () 
{
if [ "$turnoff" = true ]; then
    sudo poweroff
fi 
}

function reopenDFTool ()
{
sleep 1
clear
if [ -f "$binary_location/DFTool" ]; then
   exec sudo DFTool
   else
   exec sudo ./DFTool
fi
}

function choose_f ()
{
updateconf=1
def_formatting=$(whiptail --title "$CFM" --radiolist \
"$CF"  $r $c 4 \
"D" "$F1" ON \
"G" "$F2" OFF \
"N" "$F3" OFF 3>&1 1>&2 2>&3)
}


function formatting ()
{
case "$def_formatting" in
    D) formatta ;;
    G) formattag ;;
    *) 
        FORMATTING=$(whiptail --title "$FTEXTM" --radiolist \
        "$FTEXT"  $r $c 6 \
        "1" "$F1" ON \
        "2" "$F2" OFF 3>&1 1>&2 2>&3)
        if [[ "$FORMATTING" -eq 2 ]]; then
            formattag
        else
            formatta
        fi ;;
esac
}

##inizio prorgamma##

clear



W=$(whiptail --title "Menu' $titolo $version" --menu "$MainMenu" $r $c 6 \
	"1" "$SubMenu1" \
	"2" "$SubMenu2" \
	"3" "$SubMenu3" \
	"4" "$SubMenu4" \
	"5" "$SubMenu5" 3>&1 1>&2 2>&3)

case "$W" in 
	1)	spegnimento
		get_disks 
		check_img_update & clear
		formatting
		get_disks 
		installa 
		spegni ;;
	2)	spegnimento
		get_disks
		formatting
		spegni ;;
	3)	spegnimento
		get_disks
		check_img_update
		installa
		spegni ;;
	4)  
	    Z=$(whiptail --title "Menu' $titolo $version" --menu "$MainMenu" $r $c 6 \
        	"1" "$ADV1" \
        	"2" "$ADV2" \
        	"3" "$ADV3" \
        	"4" "$ADV4"  3>&1 1>&2 2>&3)
        	case "$Z" in 
        	    1) check_img_update
        	       reopenDFTool ;;
        	    2) update_DFTool
        	       reopenDFTool ;;
        	    3) dipendenze
                   dep="OK" 
                   update_config
                   reopenDFTool ;;
        	    4) choose_f
        	       update_config
        	       reopenDFTool ;;
        	    *) reopenDFTool;;
        	esac ;;
	5)  
	        Y=$(whiptail --title "Menu' $titolo $version" --menu "$MainMenu" $r $c 6 \
        	"1" "$INFO1" \
        	"2" "$INFO2" \
        	"3" "$INFO3" \
        	"4" "$INFO4"  3>&1 1>&2 2>&3)
        	case "$Y" in 
        	    1) su - $user sensible-browser http://www.crederepervedere.org/ &
        	       reopenDFTool ;;
        	    2) su - $user sensible-browser https://progettodejavu.blogspot.com/ &
        	       reopenDFTool ;;
        	    3) su - $user sensible-browser https://www.facebook.com/crederepervedereonlus/ &
        	       reopenDFTool ;;
        	    4) su - $user sensible-browser https://www.facebook.com/progettodejavu/ &
        	       reopenDFTool ;;
        	    *) reopenDFTool ;;
        	esac ;;			
	*) exit 1 ;;
esac


exit 0
