#!/bin/bash
version=0.6641

if [ $SUDO_USER ]; then user=$SUDO_USER; else user=`whoami`; fi


binary_location="/usr/bin"
updateconf=0

if [ -f "$binary_location/DFTool" ]; then
    IsInstalled=1
else
    IsInstalled=0
fi


if [[ $EUID -ne 0 ]];
then
if [[ $IsInstalled -eq 1 ]]; then
    exec sudo DFTool
else
    exec sudo ./DFTool
fi
     
fi


##VARIABLES #1

# Find the rows and columns will default to 80x24 is it can not be detected
home=$(eval echo "~$user") 
screen_size=$(stty size 2>/dev/null || echo 24 80) 
rows=$(echo $screen_size | awk '{print $1}')
columns=$(echo $screen_size | awk '{print $2}')

# Definisco le dimensioni dell'interfaccia:
r=$(( rows / 2 ))
c=$(( columns / 2 ))
# e nel caso in cui lo schermo sia piccolo
r=$(( r < 20 ? 20 : r ))
c=$(( c < 70 ? 70 : c ))

declare -a partitions=()
turnoff=true

titolo="Dejavu Formatting Tool"
working_dir="$home/.Dejavu"
local_bin="$working_dir/bin"
local_log="$working_dir/log"
conf_file="$working_dir/configuration.conf"
server="https://google.it"
server_check="https://google.it"
file_name="dejavu.img.gz"
local_check_name="dejavu.img.gz.md5"
local_check_downloaded="$locale_check.new" #contains the  local position of the downloaded checksum file
local_file="$working_dir/$file_name" #contains the  local position of the file
locale_check="$working_dir/$local_check_name" #contains the  local position of the checksum file
waiting_time=30 #check every 30 seconds
update_server=https://raw.githubusercontent.com/94-psy/Dejavu-Formatting-Tool/master/DFTool
total_disks=0
URL1="http://www.crederepervedere.org/"
URL2="https://progettodejavu.blogspot.com/"
URL3="https://www.facebook.com/crederepervedereonlus/"
URL4="https://www.facebook.com/progettodejavu/"
URL5="https://github.com/94-psy/Dejavu-Formatting-Tool"
minimum_space=80

if [ -f "$working_dir" ]; then
    echo "Working directory is OK"
   else
   mkdir -p $working_dir
fi


########################FUNCTIONS########################

function dipendenze ()

{
    #{
    	sudo apt update
        echo "\Installing nwipe.."
        sudo apt install nwipe -y #2>/dev/null
        #echo 33
        echo "\Installing smartmontools.."
        sudo apt install smartmontools -y #2>/dev/null
        #echo 67
        echo "\Installing sensible-utils.."
        sudo apt install sensible-utils -y #2>/dev/null
        #echo 100
        
    #} |whiptail --title "$titolo" --gauge "$Dependency" $r $c 0
}


function create_config_file ()
{
    rm $conf_file
    touch $conf_file

    whiptail --title "Missing Config File in $working_dir" --msgbox "The configurration file is missing, now we will create a new one. Please answer the short questions" $r $c 
    
    #set language
    SETTINGS=$(whiptail --title "Configuration file" --radiolist \
    "Choose user's language"  $r $c 4 \
    "EN" "English (default)" ON \
    "IT" "Italian" OFF 3>&1 1>&2 2>&3) 
    echo "LAN=$SETTINGS" >> $conf_file
    
    #set iteration number
    SETTINGS=$(whiptail --inputbox "How many times do you want to iterate the formatting method? ( DEFAULT = 1 ) " $r $c --title "Configuration file" 3>&1 1>&2 2>&3) 
    if [[ $SETTINGS -ge 1 ]]; then
        echo "ITER_NUMER=$SETTINGS" >> $conf_file
    else
        echo "ITER_NUMER=1" >> $conf_file
    fi
    
    #set formatting method
    SETTINGS=$(whiptail --title "Configuration file" --radiolist \
    "Choose default formatting"  $r $c 4 \
    "D" "Badblocks and DD, 5 pattern (default)" ON \
    "G" "Gutmann method, 35 pattern" OFF \
    "N" "Ask every time" OFF 3>&1 1>&2 2>&3)
    echo "FORM=$SETTINGS" >> $conf_file
    
    #check dependency
    dipendenze
    echo "DEP=OK" >> $conf_file
    
    #set debug    
    echo "DEBUG=OFF" >> $conf_file
    sudo chmod 775 $conf_file
}


function update_config ()
{
    mv $conf_file "$conf_file.old" 
    touch $conf_file
    echo "ITER_NUMER=$iteration" >> $conf_file
    echo "LAN=$language" >> $conf_file
    echo "DEP=$dep" >> $conf_file
    echo "FORM=$def_formatting" >> $conf_file
    echo "DEBUG=$debug_mode" >> $conf_file
    sudo chmod 775 $conf_file

        
}


function update_DFTool ()
{
#download from github the latest and move to $binary_location

wget $update_server -O /tmp/DFTool_tmp -T 30 -t 1 2>/dev/null
nversion=$( sed -n '2p' /tmp/DFTool_tmp | tr -d version= )
if [ "$version" = "$nvefrsion" ] ; then #update only when the version is different --> i want to have alway the latest available version (also one modified manualli with a higher version will be replaced)
    echo "Already Update"
    whiptail --title "$UPDFT" --msgbox "$UPDOK" $r $c
else
    echo "Updating.."
    chmod +x /tmp/DFTool_tmp
    sudo mv -f /tmp/DFTool_tmp "$binary_location"/DFTool
    whiptail --title "$UPDFT" --msgbox "$UPNO" $r $c
fi
}



function prepara_file ()
{
    file="$home/.tmp_part.txt"
    mkdir -p $working_dir
    mkdir -p $local_bin
    mkdir -p $local_log
    sudo chmod 775 --recursive $working_dir
    sudo chmod 775 --recursive $local_bin
    sudo chmod 775 --recursive $local_log
    rm -rf .counter
    rm -rf '$file'
    touch '$file'
    
}


function get_disks ()
{
    index=0
    indexi=0
    total_disks=0
    disks_list=()
    prepara_file
    sudo lsblk -io KNAME,TYPE,MOUNTPOINT  >> '$file' 

    while read name dsk_type mounting_point 
    do
        if [ "$mounting_point" == "/" ] ;
        then
            to_avoid=$name
        fi
    done < '$file' 
    dsk_type="$(echo $to_avoid | head -c 4)"
    case "$dsk_type" in
	    nvme) to_avoid="$(echo $to_avoid | head -c 4)" ;; #FOR NVME DISKS
	    mmcb) to_avoid="$(echo $to_avoid | head -c 7)" ;; #FOR MMCBLK DISKS (RASPBERRY)
	    *) to_avoid="$(echo $to_avoid | head -c 3)" ;; #FOR SATA DISKS
    esac

    while read name dsk_type mounting_point 
    do
        if [ "$dsk_type" == "disk" -a "$to_avoid" != "$name" ] ;
        then
            disks_list+=("$name")
        fi
    done < '$file'
    for i in ${disks_list[@]}; do
        (( total_disks += 1))
    done
    echo "$DSKFOUND $total_disks"
}


########################CLASSICAL FORMATTING METHOD########################
function formatta ()
{
if (whiptail  --title "$titleW" --yesno "$ASKF" $r $c ); then
        
       
    touch "$working_dir"/.counter
    for i in ${disks_list[@]};
    do
        rm "$local_log"/log_"$i" 2>/dev/null
        rm -rf "$local_bin"/.tmp_"$i" 2>/dev/null
        echo "$StartDSK/$i"
        echo "echo '$StartDSK/$i'" >> "$local_bin"/.tmp_"$i"
        echo "for ii in {0..$iteration..1}" >> "$local_bin"/.tmp_"$i"
        echo "do" >> "$local_bin"/.tmp_"$i"
            if [[ "$debug_mode" = "OFF" ]]; then
                echo "echo '$ITER1 $iteration' " >> "$local_bin"/.tmp_"$i"
                #badblocks part, 4 destructive pattern"
	        echo "sudo badblocks -fwsv /dev/$i -o $local_log/log_$i" >> "$local_bin"/.tmp_"$i" 
    	        #DD with another 0 pattern
                echo "dd if=/dev/zero of=/dev/$i status=progress" >> "$local_bin"/.tmp_"$i"
        	echo "clear" >> "$local_bin"/.tmp_"$i"
            fi
        echo "done" >> "$local_bin"/.tmp_"$i"
        echo "echo '1' >> $working_dir/.counter" >> "$local_bin"/.tmp_"$i"
        echo "rm $local_bin/.tmp_$i" >> "$local_bin"/.tmp_"$i"
        echo "exit 0" >> "$local_bin"/.tmp_"$i"
        chmod +x "$local_bin"/.tmp_"$i"
        sudo x-terminal-emulator -e "$local_bin/.tmp_$i" & 
    done
    rm -rf '$file'
    
    while [ $index -lt ${#disks_list[@]} ];do
        index=0
        
        while read contatore 
        do
          #echo $dsk_type	#debug
            (( index += $contatore))
        done < "$working_dir/.counter" 
	echo $(( $index * 100 / $total_disks )) | dialog --title "$titolo" --gauge "$FormattingProgress" $r $c 0
	
	if [[ $index -ge $total_disks ]]; then
	    sleep 1
	else
	sleep $waiting_time
	fi
	 
	done
	
	clear
    

    for i in ${disks_list[@]};
    do
    
    if [ -s "$local_log"/log_"$i" ] 
    then
    	#echo "$_file has some data."	#debug
        smartctl -i /dev/"$i" >> "$local_log"/log_"$i" 
    else
    	#echo "$_file is empty."	#debug
        rm "$local_log"/log_"$i" 2>/dev/null     
    fi
    
    done
    
    
    rm -rf "$working_dir/".counter 2>/dev/null
    
else
    whiptail --title "$ERRORT" --msgbox "$ABORTEDF" $r $c
fi
}
    

########################GUTMANN FORMATTING METHOD########################
function formattag ()
{
if (whiptail  --title "$titleW" --yesno "$ASKF" $r $c ); then

    
    for i in ${disks_list[@]};
    do
        rm "$local_log"/log_"$i" 2>/dev/null
        rm -rf "$local_bin"/.tmp_"$i"
        echo "$StartDSK/$i"
        echo "echo '$StartDSK/$i'" >> "$local_bin"/.tmp_"$i"

        if [[ "$debug_mode" = "OFF" ]]; then
	    #Gutmann method
            echo "sudo nwipe --autonuke --logfile=$local_log/log_$i --method=gutmann /dev/$i --nowait -r $iteration" >> "$local_bin"/.tmp_"$i"
	fi
	    
        echo "echo '1' >> $working_dir/.counter" >> "$local_bin"/.tmp_"$i"
        echo "rm $local_bin/.tmp_$i" >> "$local_bin"/.tmp_"$i"
        echo "exit 0" >> "$local_bin"/.tmp_"$i"
        chmod +x "$local_bin"/.tmp_"$i"
        sudo x-terminal-emulator -e "$local_bin/.tmp_$i" &

    done
    rm -rf '$file'
    
    while [ $index -lt ${#disks_list[@]} ];do
        index=0
        
        while read contatore 
        do
          #echo $dsk_type	#debug
            (( index += $contatore))
        done < "$working_dir/.counter" 
	echo $(( $index * 100 / $total_disks )) | dialog --title "$titolo" --gauge "$FormattingProgressG" $r $c 0
	
	if [[ $index -ge $total_disks ]]; then
	    sleep 1
	else
	    sleep $waiting_time
	fi
	 
	done
	clear
	

    for i in ${disks_list[@]};
    do
    
    if [ -s "$local_log"/log_"$i" ] 
    then
    	#echo "$_file has some data."	#debug
        smartctl -i /dev/"$i" >> "$local_log"/log_"$i" 
    else
    	#echo "$_file is empty."	#debug
        rm "$local_log"/log_"$i" 2>/dev/null     
    fi
    
    done

    rm -rf "$working_dir/".counter 2>/dev/null

else
    whiptail --title "$ERRORT" --msgbox "$ABORTEDF" $r $c
fi
}


function formatting ()
{
case "$def_formatting" in
    D) formatta ;;
    G) formattag ;;
    *) 
        FORMATTING=$(whiptail --title "$FTEXTM" --radiolist \
        "$FTEXT"  $r $c 6 \
        "1" "$F1" ON \
        "2" "$F2" OFF 3>&1 1>&2 2>&3)
        if [[ "$FORMATTING" -eq 2 ]]; then
            formattag
        else
            formatta
        fi ;;
esac
}



function check_img_update () 

{

sudo rm -rf "$local_check_downloaded"	
wget $server_check -O $local_check_downloaded -T 15 -t 2 2> /dev/null
exitstatus="$?"

if [[ "$exitstatus" -eq 0 ]] ; then
    #computing MD5 checksum
    md5sum "$local_file" | awk '{ print $1}' > "$locale_check"
    
    md5_server=$(sudo head -n 1 "$local_check_downloaded") #md5sum just downloaded
    md5_local=$(sudo head -n 1 "$locale_check") #md5sum already on local drive
        
    if [ "$md5_local" = "$md5_server" ] ; then
        echo "Update not necessary"
    
    else
        echo "Updating.."
        sudo mv "$local_check_downloaded" "$locale_check"
        sudo rm -rf $local_file 2>/dev/null
        wget $server -O $local_file  2> /dev/null
    
    fi
    sudo rm -rf $local_check_downloaded 2>/dev/null
else
        whiptail --title "$ERRORT" --msgbox "$WGETERROR" $r $c
fi

}




########################INSTALLING FUNCTION########################
function installa ()

{
#if [ -f "$local_file" ]; then #in case of error (missing installation file) i can't install and i will print an error
if [ -f "$local_file" ]; then
    get_disks
    touch "$working_dir"/.i_counter
    for i in ${disks_list[@]};
    do
        rm -rf "$local_bin"/.tmp_i_"$i" 2>/dev/null
        echo "$StartDSK/$i"
        echo "echo '$StartDSK/$i'" >> "$local_bin"/.tmp_i_"$i"
      
        if [[ "$debug_mode" = "OFF" ]]; then
	    echo ""
            #Installing with DD
            echo "gunzip -c $working_dir/$file_name | dd of=/dev/$i status=progress" >> "$local_bin"/.tmp_i_"$i"
      
        fi
        
        echo "echo '1' >> $working_dir/.i_counter" >> "$local_bin"/.tmp_i_"$i"
        echo "rm $local_bin/.tmp_i_$i" >> "$local_bin"/.tmp_i_"$i"
        echo "exit 0" >> "$local_bin"/.tmp_i_"$i"
        chmod +x "$local_bin"/.tmp_i_"$i"
        sudo x-terminal-emulator -e "$local_bin/.tmp_i_$i" &
    done
    rm -rf '$file'

    while [ $index -lt ${#disks_list[@]} ];do
        index=0
        
        while read contatore 
        do
            #echo $dsk_type	#debug
            (( index += $contatore))
        done < "$working_dir/.i_counter" 
        echo $(( $index * 100 / $total_disks )) | dialog --title "$titolo" --gauge "$InstallingProgress" $r $c 0

        if [[ $index -ge $total_disks ]]; then
            sleep 1
        else
            sleep $waiting_time
        fi
	 
    done
    clear

    rm -rf "$working_dir"/.i_counter 2>/dev/null 

else

    whiptail --title "$ERRORT" --msgbox "$INSTERRFI" $r $c
fi

}




function spegnimento ()
{
    if (whiptail  --title "$titolo" --yesno "$PCShutdown" $r $c ); then
        turnoff=true
    
    else
        turnoff=false
    fi
}


function spegni () 
{
if [ "$turnoff" = true ]; then
    sudo poweroff
else
    reopenDFTool
fi 
}


function reopenDFTool ()
{
sleep 1
clear
if [[ $IsInstalled -eq 1 ]] ; then
   sudo -u $user sudo DFTool
else
   sudo -u $user sudo ./DFTool
fi
}


function choose_f ()
{
updateconf=1
def_formatting=$(whiptail --title "$CFM" --radiolist \
"$CF"  $r $c 4 \
"D" "$F1" ON \
"G" "$F2" OFF \
"N" "$F3" OFF 3>&1 1>&2 2>&3)
}



########################SET THE OTHER VARIABLES########################
########################and eventually add them########################
if [ -f "$conf_file" ]; then
    echo "Config file is OK"

else
    create_config_file
fi


iteration=$( cat $conf_file | grep ITER_NUMER= | tr -d ITER_NUMER= )
if [ -z $iteration ]; then
    iteration=$(whiptail --inputbox "How mamny times do you want to iterate the formatting method? ( DEFAULT = 1 ) " $r $c --title "Configuration file" 3>&1 1>&2 2>&3) 
    if [[ $iteration -le 1 ]]; then
        iteration=1
    fi
    updateconf=1
fi

language=$( cat $conf_file | grep LAN= | tr -d LAN= )
while [ -z "$language" ]
do
    #it's empty
    updateconf=1
    language=$(whiptail --title "Configuration file incomplete" --radiolist \
    "Choose user's language"  $r $c 4 \
    "EN" "English (default)" ON \
    "IT" "Italian" OFF 3>&1 1>&2 2>&3)
done

def_formatting=$( cat $conf_file | grep FORM= | tr -d FORM= )
while [ -z "$def_formatting" ]
do
    #it's empty
    updateconf=1
    def_formatting=$(whiptail --title "Configuration file" --radiolist \
    "Choose default formatting"  $r $c 4 \
    "D" "Badblocks and DD, 5 pattern (default)" ON \
    "G" "Gutmann method, 35 pattern" OFF \
    "N" "Ask every time" OFF 3>&1 1>&2 2>&3)
done


dep="$( cat $conf_file | grep DEP= | tr -d DEP= )"
if [ -z "$dep" ]; then
    #it's empty
    updateconf=1
    dipendenze
    dep="OK"
fi

debug_mode="$( cat $conf_file | grep DEBUG= | tr -d DEBUG= )"
if [ -z "$debug_mode" ]; then
    #it's empty
    updateconf=1
    debug_mode="OFF" #Default is OFF

    
fi


#case "$dep" in
#    OK) ;;
#    *) dipendenze
#       dep="OK" 
#       update_config ;;
#esac


if [[ $updateconf -eq 1 ]] ; then
    update_config
    updateconf=0
fi

case "$language" in 
	IT ) #set IT
	MainMenu="Elenco delle principali funzionalità:"
	SubMenu1="Formatta i dischi, installa il sistema e uscire dal programma"
	SubMenu2="Formatta i dischi"
	SubMenu3="Installa il sistema"
	SubMenu4="Opzioni avanzate"
	SubMenu5="Info - link utili"
	ADV1="Aggiorna i file locali"
	ADV2="Aggiorna ed installa il DFTool in $binary_location"
	ADV3="Controlla le dipendenze"
	ADV4="Cambia formattazione di default"
	ADV5="VUOTO/INCOMPLETO"
	ADV6="Isinstalla il DFTool in $binary_location"
	ADV7="Disinstalla il DFTool da $binary_location"
	ADV8="Imposta il numero di iterazioni del metodo di formattazione scelto"
	INFO1="Home page di Credere per Vedere"
	INFO2="Home page del Progetto Dejavu"
	INFO3="Pagina Facebook di Credere per Vedere"
	INFO4="Pagina Facebook del Progetto Dejavu"
	INFO5="Repository di GitHub"
	StartDSK="Avvio il disco /dev"
	FormattingProgress="Avanzamento formattazione di default..."
	FormattingProgressG="Avanzamento formattazione con metodo Gutmann..."
	InstallingProgress="Avanzamento installazione..."
	PCShutdown="Spegnere il PC alla fine del processo?"
	Dependency="Controllando le dipendenze"
	DSKFOUND="I dischi su cui lavorare trovati ammontano a:"
	WGETERROR="Server non raggiungibile, i file locali non saranno aggiornati"
	ERRORT="ERRORE"
	CFM="Scegliere il metodo di formattazione"
	CF="Scegliere quale metodo di formattazione si vuole usare"
	FTEXTM="Scegliere il metodo di formattazione per questa sessione"
	FTEXT="Scegliere quale metodo di formattazione si vuole usare"
	F1="Badblocks e DD, 5 pattern in totale (default)"
	F2="Metodo di Gutmann, 35 pattern in totale"
	F3="Chiedere tutte le volte"
	UPDFT="Aggiornamento DFTool"
	UPDOK="Il Dejavu Formatting Tool è già all'ultima versione, premere OK per tornare al menu' principale"
	UPNO="IL Dejavu Formatting Tool è ora aggiornato all'ultima versione, premere OK per tornare al menu' principale"
	TLOG="LOG TROVATI"
	ERRLOG="La cartella log non è vuota, ci potrebbero essere dei dischi difettosi. Chiudere il programma e controllare manualmente la cartella (attendere qualche istante)? In caso contrario i log saranno cancellati"
	REMT="Disinstallazione"
	REM="Rimuovere anche la cartella $working_dir e il suo contenuto?"
	INSTERRFI="Il file di installazione è mancante, installazione annullata. Provare ad aggiornare il file o controllare la connessione ad Internet, l'installazione attuale verrà annullata"
	ITTITLE="Quante volte si vuole iterare il metodo di formattazione scelto? ( DEFAUL = 1 )"
	titleW="ATTENZIONE"
	ASKF="Il Tool formatterà tutti i dischi tranne quello su cui è montata /. Si desidera proseguire?"
	ABORTEDF="Formattazione annullata"
	INFOT="INFORMAZIONE"
	ALLERTINST="Le partizioni sono da ampliare manualmente a fine processo. Il disco deve essere da almeno $minimum_space GB per completare l'installazione"
	ITER1="Numero totale di iterazioni:"

	 ;;
				
	*) #set EN
	MainMenu="List of main functions:"
	SubMenu1="Formatting disks, installing OS, exiting program"
	SubMenu2="Formatting disks"
	SubMenu3="Installing OS"
	SubMenu4="Advanced options"
	SubMenu5="Info - useful links"
	ADV1="Update local files"
	ADV2="Update and install the DFTool in $binary_location"
	ADV3="Check dependency"
	ADV4="Change default formatting method"
	ADV5="EMPTY/INCOMPLETE"
	ADV6="Install the DFTool in $binary_location"
	ADV7="Uninstall from $binary_location the DFTool"
	ADV8="Set the number of iteration for the default formatting method"
	INFO1="Home page of Credere per Cedere"
	INFO2="Home page of Dejavu Project"
	INFO3="Facebook page of Credere per Veder"
	INFO4="Facebook page of Dejavu Project"
	INFO5="GitHub repository"
	StartDSK="Starting disk /dev"
	FormattingProgress="Default formatting in progress..."
	FormattingProgressG="Gutmann's method formatting in progress..."
	InstallingProgress="Installing progress..."
	PCShutdown="Turn off the PC at the end of the process?"
	Dependency="Checking dependecies"
	DSKFOUND="The total number of disks where is possible to work on is:"
	WGETERROR="Server unreachable, local files won't be updated"
	ERRORT="ERROR"
	CFM="Choose the formatting method"
	CF="Choose which formatting method you want to use"
	FTEXTM="Choose the formatting method for this session"
	FTEXT="Choose which formatting method you want to use"
	F1="Badblocks and DD, a total of 5 pattern (default)"
	F2="Gutmann method, a total of 35 pattern"
	F3="Ask every time"
	UPDFT="DFTool Updating"
	UPDOK="The Dejavu Formatting Tool is already up to date, press OK to return to main menu"
	UPNO="The Dejavu Formatting Tool is now at last version, press OK to return to main menu"
	TLOG="LOG FOUND"
	ERRLOG="The log folder is no empy, maybe there was some bad disks. Would you like to quit and manually check the log folder (wait some moments)? If no logs will be deleted"
	REMT="Uninstalling"
	REM="Delete also the folder $working_dir and its contents?"
	INSTERRFI="Installation file is missing, the installation is aborted. try to update the file or check your Internet connection, the installation will be aborted"
	ITTITLE="How mamny times do you want to iterate the formatting method? ( DEFAULT = 1 ) "
	titleW="WARNING"
	ASKF="The Tool will format all drives except for the one where / is mounted. Do you want to continue?"
	ABORTEDF="Formatting canceled"
	INFOT="INFORMATION"
	ALLERTINST="Partitions have to be manually expanded at the end of the process. The disk minimum size is $minimum_space GB in order to complete the installation"
	ITER1="Total iterations number:"
	 ;;
esac




##inizio prorgamma##

clear


if [ "$(ls -A $local_log)" ]; then #if true is not empty --> some logs in
    if (whiptail  --title "$TLOG" --yesno "$ERRLOG" $r $c ); then
        sudo -u $user xdg-open $local_log &
        exit 3
    else
        rm -rf $local_log
        mkdir -p $local_log
        sudo chmod 777 --recursive $local_log
    fi
fi


clear
W=$(whiptail --title "Menu $titolo $version" --menu "$MainMenu" $r $c 6 \
	"1" "$SubMenu1" \
	"2" "$SubMenu2" \
	"3" "$SubMenu3" \
	"4" "$SubMenu4" \
	"5" "$SubMenu5" 3>&1 1>&2 2>&3)

case "$W" in 
	1)	spegnimento
	    	whiptail --title "$INFOINST" --msgbox "$ALLERTINST" $r $c
		get_disks 
		check_img_update & clear
		formatting
		installa 
		spegni ;;
	2)	spegnimento
		get_disks
		formatting
		spegni ;;
	3)	spegnimento
	    	whiptail --title "$INFOINST" --msgbox "$ALLERTINST" $r $c
		check_img_update
		installa
		spegni ;;
	4)    	Z=$(whiptail --title "Menu' $titolo $version" --menu "$MainMenu" $r $c 10 \
        	"1" "$ADV1" \
        	"2" "$ADV2" \
        	"3" "$ADV3" \
        	"4" "$ADV4" \
        	"5" "$ADV5" \
        	"6" "$ADV6" \
        	"7" "$ADV7" \
        	"8" "$ADV8"  3>&1 1>&2 2>&3)
        	case "$Z" in 
        	    1) check_img_update
        	       reopenDFTool ;;
        	    2) update_DFTool
        	       reopenDFTool ;;
        	    3) dipendenze
		       dep="OK" 
                       update_config
                       reopenDFTool ;;
        	    4) choose_f
        	       update_config
        	       reopenDFTool ;;
        	    5) reopenDFTool ;;
        	    6) wget $update_server -O /tmp/DFTool_tmp -T 30 -t 1 2>/dev/null
        	       sudo mv -f /tmp/DFTool_tmp "$binary_location"/DFTool
		       sudo chmod 775 "$binary_location"/DFTool
        	       reopenDFTool ;;
        	    7) rm $binary_location/DFTool
        	       if (whiptail  --title "$REMT" --yesno "$PCShutdown" $r $c ); then
                       rm -rf $working_dir
        	       fi
        	       reopenDFTool ;;
        	    8) iteration=$(whiptail --inputbox "$ITTITLE" $r $c --title "$CFM" 3>&1 1>&2 2>&3) 
                        if [[ $iteration -le 1 ]]; then
                       		iteration=1
                   	fi
			updateconf=1
			update_config
                   	reopenDFTool;;
        	    *)  reopenDFTool;;
        	esac ;;
	5)      Y=$(whiptail --title "Menu' $titolo $version" --menu "$MainMenu" $r $c 10 \
        	"1" "$INFO1" \
        	"2" "$INFO2" \
        	"3" "$INFO3" \
        	"4" "$INFO4" \
        	"5" "$INFO5" 3>&1 1>&2 2>&3)
        	case "$Y" in 
        	    1) sudo -u $user sensible-browser $URL1 2> /dev/null &
        	       reopenDFTool ;;
        	    2) sudo -u $user sensible-browser $URL2 2> /dev/null &
        	       reopenDFTool ;;
        	    3) sudo -u $user sensible-browser $URL3 2> /dev/null &
        	       reopenDFTool ;;
        	    4) sudo -u $user sensible-browser $URL4 2> /dev/null &
        	       reopenDFTool ;;
        	    5) sudo -u $user sensible-browser $URL5 2> /dev/null &
        	       reopenDFTool ;;
        	    *) reopenDFTool ;;
        	esac ;;			
	*) exit 1 ;;
esac


exit 0
